# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

app_identifier = "net.natura.NatDSSampleApp"
workspace_path = "./NatDS.xcworkspace"

ad_hoc_prefix = "match AdHoc"
app_store_prefix = "match AppStore"

scheme = "NatDS-SampleApp"
target = "NatDS_SampleApp"

scheme_lib = "NatDS"

desc "CI Only - Install all project dependencies (npm & pods)"
lane :install do
  if !is_ci
    UI.user_error!("This can only be executed on CI.")
  end
  
  sh("npm install")
  pods_install
end

desc "Install cocoapods dependencies"
lane :pods_install do
  cocoapods(repo_update:true, clean_install: false, use_bundle_exec:true)
end

platform :ios do
  desc "Run all Unit Tests"
  lane :test do
    scan(
      workspace: workspace_path,
      scheme: scheme_lib,
      destination: "platform=iOS Simulator,name=iPhone 8,OS=13.3",
      skip_detect_devices: true
    )
  end

  desc "Fetch the Development, AdHoc and Distribution Certificates"
  lane :fetch_certificates do
    match(app_identifier: app_identifier, readonly: true, type: "development")
    match(app_identifier: app_identifier, readonly: true, type: "appstore")
  end

  desc "Install cocoapods dependencies"
  lane :pods_install do
    cocoapods(repo_update:true, clean_install: false, use_bundle_exec:true)
  end

  desc "Build IPA"
  lane :build_prd_ipa do
    build_ipa(
      scheme: scheme, 
      method: "ad-hoc", 
      provisioningProfiles: {
        app_identifier => "#{ad_hoc_prefix} #{app_identifier}",
      }
    )
  end

  desc "Release an Alpha version on Test Flight"
  lane :release_alpha do
    send_build_to_test_flight(
      app_identifier: app_identifier, 
      scheme: scheme, 
      provisioningProfiles: {
        app_identifier => "#{app_store_prefix} #{app_identifier}",
      })
  end

  lane :build_ipa do |options|
    if is_ci
      increment_build_number(build_number: ENV["BITRISE_BUILD_NUMBER"])
    end

    version_number = get_version_number(xcodeproj: 'SampleApp/NatDS-SampleApp.xcodeproj')
    build_number = get_build_number
    file_name = "#{options[:scheme]}_#{version_number}_#{build_number}.ipa"

    gym(
      scheme: options[:scheme],
      export_options: {
        method: options[:method],
        provisioningProfiles: options[:provisioningProfiles]
      },
      output_directory: "output/ipa",
      output_name: file_name
    ) 
  end

  private_lane :send_build_to_test_flight do |options|
    if is_ci
      increment_build_number(
        build_number: ENV["BITRISE_BUILD_NUMBER"],
        xcodeproj: "SampleApp/NatDS-SampleApp.xcodeproj"
      )
    end
    
    build_ipa(
      scheme: options[:scheme],
      method: options[:method], 
      provisioningProfiles: options[:provisioningProfiles]
    )
    
    testflight(
      app_identifier: options[:app_identifier],
      distribute_external: false,
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      username: "systemteamopensource@natura.net",
    )

    clean_build_artifacts
  end

  desc "Updates SampleApp and DS Lib versions with next Major (X.Y.Y) number, also tag and commit it."
  lane :update_major do
    next_minor_version || fail('Failed to generate next version')
    
    updated_version_number = next_major_version

    increment_version_number_and_commit(
      version: updated_version_number, 
      xcodeproj: "./NatDS.xcodeproj",
      commit_message: "Major version Bump - NatDS"
    )

    increment_version_number_and_commit(
      version: updated_version_number,
      xcodeproj: "./SampleApp/NatDS-SampleApp.xcodeproj",
      commit_message: "Major version Bump - SampleApp"
    )

    add_git_tag(tag: "#{updated_version_number}")
    push_to_git_remote(local_branch: git_branch)
  end

  desc "Updates SampleApp and DS Lib versions with next Minor (Y.X.Y) number, also tag and commit."
  lane :update_minor do
    next_minor_version || fail('Failed to generate next version')
    
    updated_version_number = next_minor_version

    increment_version_number_and_commit(
      version: updated_version_number,
      xcodeproj: "./NatDS.xcodeproj",
      commit_message: "Minor version Bump - NatDS"
    )

    increment_version_number_and_commit(
      version: updated_version_number,
      xcodeproj: "./SampleApp/NatDS-SampleApp.xcodeproj",
      commit_message: "Minor version Bump - SampleApp"
    )

    add_git_tag(tag: "#{updated_version_number}")
    push_to_git_remote(local_branch: git_branch) 
  end

  desc "Updates SampleApp and DS Lib versions with next Patch (Y.Y.X) number, also tag and commit."
  lane :update_patch do
    next_patch_version || fail('Failed to generate next version')
    
    updated_version_number = next_patch_version

    increment_version_number_and_commit(
      version: updated_version_number,
      xcodeproj: "./NatDS.xcodeproj",
      commit_message: "Patch version Bump - NatDS"
    )

    increment_version_number_and_commit(
      version: updated_version_number,
      xcodeproj: "./SampleApp/NatDS-SampleApp.xcodeproj",
      commit_message: "Patch version Bump - SampleApp"
    )

    add_git_tag(tag: "#{updated_version_number}")
    push_to_git_remote(local_branch: git_branch)
  end

  def next_major_version
    last_tag = `git tag -l --sort=creatordate [0-9]*.[0-9]*.[0-9]* | tail -n 1`
    major, minor, patch = last_tag.split('.')
    major = major.to_i + 1
    [ major, 0, 0 ].join('.')
  end

  def next_minor_version
    last_tag = `git tag -l --sort=creatordate [0-9]*.[0-9]*.[0-9]* | tail -n 1`
    major, minor, patch = last_tag.split('.')
    minor = minor.to_i + 1
    [ major, minor, 0 ].join('.')
  end

  def next_patch_version
    last_tag = `git tag -l --sort=creatordate [0-9]*.[0-9]*.[0-9]* | tail -n 1`
    major, minor, patch = last_tag.split('.')
    patch = patch.to_i + 1
    [ major, minor, patch ].join('.')
  end

  def next_build_number
    `git tag --list "release-*" | cut -d . -f 4 | sort -rn | head -n 1 | xargs expr 1 +`.strip!
  end

  def version_number
    version = get_version_number(
      xcodeproj: "./NatDS.xcodeproj",
      target: "NatDS"
    )
  end

  def increment_version_number_and_commit(version:, xcodeproj:, commit_message:)
    increment_version_number(
      xcodeproj: xcodeproj,
      version_number: version
    )

    commit_version_bump(
      message: commit_message,
      xcodeproj: xcodeproj
    )
  end
end
